source("/Volumes/LPIG/SRlab/Maria_Data/Manuscript DUXBL/Figure 2/Venn diagrams/Venn diagrams.R")
## Venn diagrams ##
library(eulerr)
plot(euler(c("A" = 2353, "B" = 9981, "A&B" = 507)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
labels = FALSE)
plot(euler(c("A" = 2353, "B" = 231, "A&B" = 76)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
labels = FALSE)
plot(euler(c("A" = 16550, "B" = 61117, "A&B" = 1800)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
labels = FALSE)
plot(euler(c("A" = 2353, "B" = 9981, "A&B" = 507)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
quantities = T,
labels = FALSE)
## Venn diagrams ##
library(eulerr)
plot(euler(c("A" = 2353, "B" = 9981, "A&B" = 507)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
quantities = TRUE,
labels = FALSE)
plot(euler(c("A" = 2712, "B" = 146, "A&B" = 64)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
labels = FALSE)
## Venn diagrams ##
library(eulerr)
plot(euler(c("A" = 2712, "B" = 146, "A&B" = 64)),
fills = list(fill = c("steelblue", "gold"), alpha = 0.5),
edges = FALSE,
labels = FALSE)
install.packages(c("BiocManager", "bit", "boot", "broom", "bslib", "callr", "cli", "cluster", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "farver", "forcats", "foreign", "gargle", "generics", "ggplot2", "googlesheets4", "gtable", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "isoband", "jpeg", "jsonlite", "knitr", "latticeExtra", "lifecycle", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "pillar", "plyr", "png", "polyclip", "processx", "ps", "purrr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "rvest", "sass", "scales", "slider", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "vctrs", "viridisLite", "vroom", "xfun", "yaml"))
help(package="ggplot2")
browseVignettes("ggplot2")
help(package="devtools")
install.packages("devtools")
help(package="devtools")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("dplyr")
library(dplyr)
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
getwd
getwd()
setwd("/Users/vegasendinom2/Desktop/R_Coursera/Reproducible research/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
View(data)
total_steps <- tapply(data$steps, data$date, FUN = sum, na.rm = TRUE)
total_steps <- aggregate(steps ~ date, data=data, FUN=sum)
View(total_steps)
hist(total_steps$steps)
hist(total_steps$steps, breaks = 1000)
hist(total_steps$steps, breaks = 100)
hist(total_steps$steps, breaks = 20)
hist(total_steps$steps, breaks = 20, xlim = 2500)
hist(total_steps$steps, breaks = 20, xlim = 2500)
hist(total_steps$steps, breaks = 20, xlim = 3000)
hist(total_steps$steps, breaks = 20)
hist(total_steps$steps, breaks = 20, xlim = 25000)
hist(total_steps$steps, breaks = 20, xlim = 250000)
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day")
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", plot = TRUE)
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", plot = TRUE, xlim = 25000)
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", plot = TRUE, xlim = "25000")
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", xlim = c(0,25000))
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", xlim = c(0,22000))
hist(total_steps$steps, breaks = 20, xlab = "Total Steps per Day", xlim = c(0,25000))
hist(total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day", xlab = "Total Steps Per Day", xlim = c(0,25000))
hist(total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = NULL)
hist(total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
hist(total_steps$steps, breaks = 50, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
hist(total_steps$steps, breaks = 25, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
hist(total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
mean(total_steps$steps)
median(total_steps$steps)
library(tidyverse)
data <- read.csv("activity.csv")
#act_data$date <- as.Date(act_data$date, format="%Y-%m-%d")
#act_data$interval <- as.factor(act_data$interval)
total_steps <- aggregate(steps ~ date, data = data, FUN = sum)
head(total_steps)
hist(total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
mean(total_steps$steps)
median(total_steps$steps)
summary(total_steps$steps)
# Calculate the average number of steps taken in every 5-minute interval
average_steps <- aggregate(steps ~ interval, data = data, FUN = mean)
head(average_steps)
# Make a time series plot
ggplot(average_steps, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw()
average_steps[which.max(average_steps$steps),]
sum(is.na(data$steps))
new_data <- data
new_data <- new_data %>%
group_by(interval) %>%
mutate_if(is.numeric,
function(x) ifelse(is.na(x),
mean(x, na.rm = TRUE),
x))
head(new_data)
# Check if there are missing values
sum(is.na(new_data$steps))
new_total_steps <- aggregate(steps ~ date, data = new_data, FUN = sum)
hist(new_total_steps$steps, breaks = 20, main = "Total Steps Taken Per Day",
xlab = "Total Steps Per Day", xlim = c(0,25000), col = "lightblue")
mean(new_total_steps$steps)
median(new_total_steps$steps)
summary(new_total_steps$steps)
summary(total_steps$steps)
View(new_data)
weekdays(new_data$date)
# Convert the variable date to date format
new_data$date <- as.Date(new_data$date, format="%Y-%m-%d")
View(new_data)
weekdays(new_data$date)
new_data_day <- new_data
new_data_day$day <- as.factor(new_data_day$day)
View(new_data_day)
new_data_day[,day]
new_data_day <- new_data_day[,day]
new_data_day[, day := ifelse(weekdays(date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")]
new_data_day[, day ~ ifelse(weekdays(date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")]
new_data_day$day <- weekdays(new_data_day$date)
new_data_day$day1 <- ifelse(weekdays(new_data_day$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")]
new_data_day$day1 <- ifelse(weekdays(new_data_day$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
# Create the new variable
new_data_day <- new_data
new_data_day$day <- ifelse(weekdays(new_data_day$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
new_data_day$day <- as.factor(new_data_day$day)
# Calculate the average number of steps taken in every 5-minute interval
average_steps1 <- aggregate(steps ~ interval, data = new_data_day, FUN = mean)
head(average_steps)
View(average_steps)
View(average_steps1)
View(average_steps)
head(average_steps1)
# Calculate the average number of steps taken in every 5-minute interval
average_steps1 <- aggregate(steps ~ interval + day, data = new_data_day, FUN = mean)
View(average_steps1)
# Calculate the average number of steps taken in every 5-minute interval
average_steps_day <- aggregate(steps ~ interval + day, data = new_data_day, FUN = mean)
head(average_steps_day)
# Make a time series plot
ggplot(average_steps_day, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw()
# Make a time series plot
ggplot(average_steps_day, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw() +
facet_wrap(~day)
# Make a time series plot
ggplot(average_steps_day, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw() +
facet_grid(~day)
# Make a time series plot
ggplot(average_steps_day, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw() +
facet_wrap(~day)
# Make a time series plot
ggplot(average_steps_day, aes(interval, steps)) +
geom_line() +
labs(title = "Average Daily Activity Pattern") +
xlab("5-minute interval") + ylab("Average number of steps") +
theme_bw() +
facet_wrap(~day, 2, 1)
